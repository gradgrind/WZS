My basic idea was to collect "very hard" constraints – which must be
easy to test – and use these for initial placements. A "full" timetable
can thus hopefully be generated fairly quickly, if it is at all possible.
I would then test the other hard constraints and this would determine
whether the table is viable. The final stage would be to score the soft
constraints, so that various attempts can be compared and the "best"
one chosen.

Algorithmically this should not be too difficult, and perhaps I should
use basically the same approach for manual placement to keep it simple.
Of course the separation of "very hard" constraints would then not make
any sense, but modifying that aspect should be no problem.

Activities can require certain rooms. Sometimes it is possible to choose
one from a list of acceptable choices.

I have decided to handle "fixed" rooms (where there is no choice) and
selectable rooms separately because their allocation is so different.
Fixed rooms can be allocated rather like teachers, in a fairly efficient
manner. Handling choices can call for far more processing.

I had considered attempting to allocate all room choices for each time-
slot together. This ought to be able to find a solution if there is one,
and indeed, if it was only a matter of single-period lessons, it might
be feasible. However, where the individual lessons cover various time-
slots, it begins to look a bit like a nightmare of complexity.

The current preferred approach is to keep it (fairly) simple! The fixed
rooms are counted as (very) hard consrtaints – like teacher availability.
Room choices can be soft or hard (set globally as a single weighting for
all choice lists?).
If the room choices are a hard constraint (weight = '+'), they
will be tested as part of the hard constraint evaluation returning
a full list of rooms (which can be empty?) if successful, or <None> if
unsuccessful.
If the room choices are a soft constraint, they will (like other soft
constraints) only be tested when all activities have been placed. In
this case room lists containing one or more null (0) rooms are possible –
when not all required rooms could be allocated. The penalty could be
calculated from the weighting and the number of null rooms. How large
should such penalties be?
Unlike other soft penalties, missing rooms would presumably still need
to be found – in this case manually, perhaps by allowing rooms previously
not considered as suitable? Perhaps an alternative can be found for one
of the blocking activities instead, so it is something probably best left
up to the user.

Seeking blockers is done separately – on demand (via the room selection
dialog for the blocked activity)? I have lists of acceptable rooms and
arrays detailing which activities are in each room. I can just read
these when necessary.

